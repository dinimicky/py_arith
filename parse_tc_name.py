#!/usr/bin/env python
# encoding: utf-8
'''
parse_tc_name -- parse test case name to collect the result 

parse_tc_name is a tool to collect the test result

It defines classes_and_methods

@author:     ezonghu

@copyright:  2014 ericsson. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os
import fnmatch
from datetime import datetime
from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2014-09-03'
__updated__ = '2014-09-03'

TestCasePattern = "TC_*.tgz"
TimeFormat = "%Y%m%d_%H%M%S"
def main(argv=None):
    '''Command line options.'''

    _program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2014 ezonghu (ericsson)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]

    # setup option parser
    parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
    parser.add_option("-d", "--directory", dest="directory", help="set test cases path ", default=".")
    parser.add_option("-b", "--before", dest="before", help="set the time to filter the executed test cases before the time, time format is %Y%m%d_%H%M%S")
    parser.add_option("-a", "--after", dest="after", help="to filter the executed test cases before the time, time format is %Y%m%d_%H%M%S")



    # process options
    (opts, _args) = parser.parse_args(argv)
    
    printRes(parse_tc(opts.directory, opts.before, opts.after))


def parse_tc(path, before, after):
    global TestCasePattern, TimeFormat
    CaseRes = {}
    if before:
        before = datetime.strptime(before, TimeFormat)
    if after:
        after = datetime.strptime(after, TimeFormat)
        
    for fn in os.listdir(path):
        if fnmatch.fnmatch(fn, TestCasePattern):
            fn_list = fn.split("-")
            TC = fn_list[0]
            Tm = datetime.strptime(fn_list[1], TimeFormat)
            Res = fn_list[3]
            
            if before and Tm > before:
                continue
            if after and Tm < after:
                continue
            
            if TC not in CaseRes:
                CaseRes[TC] = {Tm:Res}
            else:
                CaseRes[TC][Tm] = Res
                
    return CaseRes
            
def printRes(CaseRes):
    for TC, Res in CaseRes.items():
        ResStr = TC
        for r in sorted(Res):
            ResStr += ";"+Res[r]
        print(ResStr)

if __name__ == "__main__":
    sys.exit(main())